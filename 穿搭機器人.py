# -*- coding: utf-8 -*-
"""穿搭機器人.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lMGdncSoJNw5DQH84tJCxzk47tJ19GZE
"""

import requests
import math
import concurrent.futures
from datetime import datetime
import streamlit as st

# API 設定
API_HUMAN = "https://opendata.cwa.gov.tw/fileapi/v1/opendataapi/O-A0003-001?Authorization=CWA-4E0D8035-5999-4578-85B2-6E61AD206449&downloadType=WEB&format=JSON"
API_AUTO = "https://opendata.cwa.gov.tw/fileapi/v1/opendataapi/O-A0001-001?Authorization=CWA-4E0D8035-5999-4578-85B2-6E61AD206449&downloadType=WEB&format=JSON"
API_RAIN = "https://opendata.cwa.gov.tw/fileapi/v1/opendataapi/O-A0002-001?Authorization=CWA-4E0D8035-5999-4578-85B2-6E61AD206449&downloadType=WEB&format=JSON"

def get_weather_data(url):
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return response.json()['cwaopendata']['dataset']['Station']
    except:
        return []

def fetch_all_data():
    with concurrent.futures.ThreadPoolExecutor() as executor:
        f1 = executor.submit(get_weather_data, API_HUMAN)
        f2 = executor.submit(get_weather_data, API_AUTO)
        f3 = executor.submit(get_weather_data, API_RAIN)
        return f1.result() + f2.result(), f3.result()

def format_time(dt_str):
    try:
        dt = datetime.fromisoformat(dt_str.replace("Z", "+00:00"))
        return dt.strftime("%Y-%m-%d %H:%M")
    except:
        return "未知時間"

def calculate_vapor_pressure(temp, rh):
    es = 6.112 * math.exp((17.67 * temp) / (temp + 243.5))
    return es * (rh / 100)

def calculate_feels_like(temp, vapor_pressure, wind):
    return 1.04 * temp + 0.2 * vapor_pressure - 0.65 * wind - 2.7

def get_outfit_suggestion(temp, rain, wind):
    try:
        temp = float(temp)
        rain = float(rain) if rain != "無資料" else 0
        wind = float(wind)
    except:
        return "無法提供穿搭建議"

    suggestion = ""
    if temp >= 30:
        suggestion = "短袖短褲，注意防曬 ☀️"
    elif temp >= 20:
        suggestion = "薄長袖或 T-shirt，早晚涼 🧥"
    elif temp >= 10:
        suggestion = "建議外套、風衣 🧣"
    else:
        suggestion = "毛衣、厚外套、帽子 🧤"

    if rain >= 1:
        suggestion += "，記得帶雨具 ☔"

    if wind >= 6:
        suggestion += "，風大注意保暖 🌬️"

    return suggestion

def get_weather_and_suggestion(city, town):
    stations, rain_stations = fetch_all_data()
    weather_info = "❌ 找不到氣象資訊"
    outfit = "無法建議穿搭"
    selected_station = None
    note=" "

    for station in stations:
        if station['GeoInfo']['CountyName'] == city and station['GeoInfo']['TownName'] == town:
            selected_station = station
            break

    if not selected_station:
        for station in stations:
            if station['GeoInfo']['CountyName'] == city:
                selected_station = station
                note = "⚠️ 找不到指定行政區的測站，顯示最近的測站資料。\n"
                break

    if selected_station:
        elem = selected_station.get('WeatherElement', {})
        temp = elem.get('AirTemperature', "無資料")
        humd = elem.get('RelativeHumidity', "無資料")
        wind = elem.get('WindSpeed', "無資料")
        rain = "無資料"
        time = format_time(selected_station.get('ObsTime', {}).get('DateTime', ""))

        rain_station = next(
            (r for r in rain_stations if r['GeoInfo']['CountyName'] == selected_station['GeoInfo']['CountyName'] and
             r['GeoInfo']['TownName'] == selected_station['GeoInfo']['TownName']), None)
        if rain_station:
            rain_elem = rain_station.get('WeatherElement', {}).get('Now', {})
            rain = rain_elem.get('Precipitation', "無資料")

        try:
            temp_f = float(temp)
            humd_f = float(humd)
            wind_f = float(wind)
            vapor_p = calculate_vapor_pressure(temp_f, humd_f)
            feel_temp = calculate_feels_like(temp_f, vapor_p, wind_f)
            feel_temp_str = f"{feel_temp:.1f}°C"
        except:
            feel_temp_str = "無法計算"


        weather_info = note + f"""
📍 測站地點：{selected_station['GeoInfo']['CountyName']} {selected_station['GeoInfo']['TownName']}
🌡️ 氣溫：{temp}°C（體感：{feel_temp_str}）
💧 濕度：{humd}%
🌬️ 風速：{wind} m/s
☔ 降雨：{rain} mm
🕒 觀測時間：{time}
        """

        outfit = get_outfit_suggestion(temp, rain, wind)

    return weather_info, outfit

# --- Streamlit 互動部分 ---
st.title("穿搭氣象小幫手 👕🌦️")
city = st.text_input("請輸入縣市（例如：新北市）：").replace("台北", "臺北")
town = st.text_input("請輸入行政區（例如：三重區）：")

if st.button("查詢"):
    st.write("⏳ 查詢中...")
    weather_info, suggestion = get_weather_and_suggestion(city, town)
    st.subheader("📍 氣象資訊")
    st.write(weather_info)
    st.subheader("🧥 穿搭建議")
    st.write(suggestion)